// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String    @id // Using the ID from Mercacio store
  title            String
  description      String    @db.Text
  shortDescription String?   @db.Text @map("short_description")
  sku              String?
  basePrice        Decimal   @db.Decimal(10, 2) @map("base_price")
  vatRate          Decimal?  @db.Decimal(5, 2) @map("vat_rate")
  vatIncluded      Boolean   @default(false) @map("vat_included")
  commissionRate   Decimal   @db.Decimal(5, 2) @map("commission_rate")
  commissionType   String    @default("fixed") @map("commission_type")
  stockQuantity    Int       @default(0) @map("stock_quantity")
  thumbnailUrl     String?   @map("thumbnail_url")
  imageUrl         String?   @map("image_url")
  galleryUrls      String[]  @map("gallery_urls")
  vendorName       String?   @map("vendor_name")
  salesPageUrl     String?   @map("sales_page_url")
  status           String    @default("draft")
  featured         Boolean   @default(false)
  visibility       String    @default("public")
  categoryId       String?   @map("category_id")
  landingPages     LandingPage[]
  affiliateCommissions AffiliateProductCommission[]
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  storeProducts    StoreProduct[]

  @@map("products")
}

model LandingPage {
  id              String    @id @default(uuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  mercacioUserId  String    // User ID from Mercacio APP
  trackingId      String    @unique // Affiliate tracking ID from mercacio.store
  template        String    @db.Text  // Template content/structure
  settings        Json?     // Page settings (colors, fonts, tracking pixels, etc)
  customData      Json?     // Custom data for this landing page (pricing, locale, etc)
  isActive        Boolean   @default(true)
  locale          String    @default("en") // Language/country code
  affiliateId     String?   // Optional affiliate ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([trackingId])
  @@index([mercacioUserId])
  @@map("landing_pages")
}

// Simple API key management for secure communication
model ApiKey {
  id          String    @id @default(uuid())
  name        String    // Purpose/description of the key
  key         String    @unique
  isActive    Boolean   @default(true)
  lastUsed    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([key])
  @@map("api_keys")
}

// Custom commission rates for specific affiliate-product combinations
model AffiliateProductCommission {
  id            String   @id @default(uuid())
  productId     String   // Original product ID from main app
  affiliateId   String   // Affiliate ID from main app
  commission    Decimal  @db.Decimal(10, 2) // Fixed commission amount in euros
  isActive      Boolean  @default(true)
  externalSync  Boolean  @default(false) @map("external_sync") // Track if synced with external API
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  product       Product  @relation(fields: [productId], references: [id])

  @@unique([productId, affiliateId])
  @@index([affiliateId])
  @@map("affiliate_product_commissions")
}

model Store {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  logo        String?
  banner      String?
  theme       Json?     // Store theme settings
  settings    Json?     // Store settings (currency, language, etc)
  ownerId     String    // User ID from Mercacio APP
  affiliateId String?   // Affiliate who created/owns this store
  isActive    Boolean   @default(true)
  products    StoreProduct[]
  carts       Cart[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([ownerId])
  @@index([affiliateId])
  @@map("stores")
}

model StoreProduct {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  isActive    Boolean   @default(true)
  featured    Boolean   @default(false)
  sortOrder   Int       @default(0)
  cartItems   CartItem[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([storeId, productId])
  @@index([productId])
  @@map("store_products")
}

model Cart {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  sessionId   String    @unique // Browser session ID
  items       CartItem[]
  status      String    @default("active") // active, abandoned, completed
  metadata    Json?     // Additional cart data
  expiresAt   DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([storeId])
  @@index([sessionId])
  @@map("carts")
}

model CartItem {
  id              String    @id @default(uuid())
  cartId          String
  cart            Cart      @relation(fields: [cartId], references: [id])
  storeProductId  String
  storeProduct    StoreProduct @relation(fields: [storeProductId], references: [id])
  quantity        Int
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@unique([cartId, storeProductId])
  @@map("cart_items")
}
